// Generated by CoffeeScript 1.9.3
var Buffer, Imagemin, Tools, _, _mapPath, color, crypto, fs, gulp, gutil, hashLength, imgMap, path, plumber, rename, setting,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fs = require('fs');

path = require('path');

// _ = require('lodash');

// crypto = require('crypto');

gulp = require('gulp');

gutil = require('gulp-util');

// rename = require('gulp-rename');

// plumber = require('gulp-plumber');

// Buffer = require('buffer').Buffer;

// Imagemin = require('imagemin');

setting = require('./setting');

color = gutil.colors;

hashLength = setting.hashLength;

imgMap = {};

_mapPath = setting.mapPath;


/*
 * base functions
 */

Tools = {
  // md5: function(source) {
  //   var _buf, _str;
  //   _buf = new Buffer(source);
  //   _str = _buf.toString("binary");
  //   return crypto.createHash('md5').update(_str).digest('hex');
  // },
  // mkdirsSync: function(dirpath, mode) {
  //   if (fs.existsSync(dirpath)) {
  //     return true;
  //   } else {
  //     if (Tools.mkdirsSync(path.dirname(dirpath), mode)) {
  //       fs.mkdirSync(dirpath, mode);
  //       return true;
  //     }
  //   }
  // },
  // errHandler: function(e) {
  //   gutil.beep();
  //   gutil.beep();
  //   return gutil.log(e);
  // },
  //
  // /*
  //  * obj mixin function
  //  * Example:
  //  * food = { 'key': 'apple' }
  //  * food2 = { 'name': 'banana', 'type': 'fruit' }
  //  * console.log objMixin(food2,food)
  //  * console.log objMixin(food,food2)
  //  */
  // objMixin: _.partialRight(_.assign, function(a, b) {
  //   var val;
  //   val = typeof a === 'undefined' ? b : a;
  //   return val;
  // }),
  // getJSONSync: function(file) {
  //   return JSON.parse(fs.readFileSync(file, 'utf8'));
  // },
  // getImgMap: function() {
  //   var _imgMap, e;
  //   _imgMap = {};
  //   try {
  //     _imgMap = Tools.getJSONSync(path.join(_mapPath, setting.imgMap));
  //   } catch (_error) {
  //     e = _error;
  //   }
  //   return _imgMap;
  // },
  // getHashMaps: function() {
  //   var _cssMap, _jsMap, e;
  //   _cssMap = {};
  //   _jsMap = {};
  //   try {
  //     _cssMap = Tools.getJSONSync(path.join(_mapPath, setting.cssMap));
  //     _jsMap = Tools.getJSONSync(path.join(_mapPath, setting.jsMap));
  //   } catch (_error) {
  //     e = _error;
  //   }
  //   return Tools.objMixin(_cssMap, _jsMap);
  // },
  getType: function(dir) {
    var type;
    type = (path.parse(dir).ext).replace('.', '');
    if (type === 'html' || type === 'php' || type === 'ejs') {
      type = 'tpl';
    }
    return type;
  },
  // htmlMinify: function(source) {
  //   return source.replace(/<!--([\s\S]*?)-->/g, '').replace(/\/\*([\s\S]*?)\*\//g, '').replace(/^\s+$/g, '').replace(/\n/g, '').replace(/\t/g, '').replace(/\r/g, '').replace(/\n\s+/g, ' ').replace(/\s+/g, ' ').replace(/>([\n\s+]*?)</g, '><').replace(/<?phpforeach/g, '<?php foreach').replace(/<?phpecho/g, '<?php echo');
  // },
  // imgCopy: function(cb) {
  //   return gulp.src(setting.imgPath + '**/*.{gif,jpg,png,svg}').pipe(gulp.dest(setting.distPath + 'img')).on('end', function() {
  //     gutil.log("Img copy done!");
  //     return cb && cb();
  //   });
  // },
  // imgHash: function(cb) {
  //   var _imgSrcPath, _map, jsonData, makePaths;
  //   _map = {};
  //   _imgSrcPath = path.join(setting.root, setting.imgPath);
  //   Tools.imgCopy();
  //   makePaths = function(sup_path) {
  //     var _ext, _sup_path;
  //     _sup_path = sup_path || _imgSrcPath;
  //     _ext = ['.png', '.jpg', '.gif'];
  //     return fs.readdirSync(_sup_path).forEach(function(v) {
  //       var _distname, _hash, _imgmin, _name, _source, _this_ext, ref, sub_Path;
  //       sub_Path = path.join(_sup_path, v);
  //       if (fs.statSync(sub_Path).isDirectory()) {
  //         return makePaths(sub_Path);
  //       } else if (fs.statSync(sub_Path).isFile() && v.indexOf('.') !== 0 && (ref = path.extname(sub_Path), indexOf.call(_ext, ref) >= 0)) {
  //         _name = sub_Path.replace(_imgSrcPath, '').replace(/\\\\/g, '/').replace(/\\/g, '/');
  //         _this_ext = path.extname(_name);
  //         _source = String(fs.readFileSync(sub_Path, 'utf8'));
  //         _hash = Tools.md5(_source);
  //         _distname = _name.replace(_this_ext, '.') + _hash.substring(0, hashLength) + _this_ext;
  //         _map[_name] = {};
  //         _map[_name].hash = _hash;
  //         _map[_name].distname = _distname.replace(/\\\\/g, '/').replace(/\\/g, '/');
  //         _imgmin = new Imagemin().src(sub_Path).dest(setting.distPath + 'img').use(rename(_distname));
  //         return _imgmin.run(function(err, files) {
  //           return err && (function() {
  //             throw err;
  //           })();
  //         });
  //       }
  //     });
  //   };
  //   makePaths(_imgSrcPath);
  //   jsonData = JSON.stringify(_map, null, 2);
  //   !fs.existsSync(_mapPath) && Tools.mkdirsSync(_mapPath);
  //   fs.writeFileSync(path.join(_mapPath, setting.imgMap), jsonData, 'utf8');
  //   gutil.log(color.green(setting.imgMap + " build success"));
  //   return cb && cb();
  // }
};

module.exports = Tools;
